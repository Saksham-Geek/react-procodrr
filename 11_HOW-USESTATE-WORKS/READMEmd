# React `useState` Hook Notes â€“ Advanced Understanding

## Overview

**1. What useState Is and How it Triggers Re-renders**

- useState is a **hook** used in React
- It allows you to **create state variables** in your components.
- When a state variable created with useState is updated, the **page automatically re-renders**.
- This automatic re-rendering reflects the **changes** on your page.

A "hook" is just a fancy name; you can understand useState as a **function**.

**2. How React Manages State Internally (Internal State Store)**

- React **does not update** the variable value directly when you call the set function (e.g., setCount).
- Even if the variable were declared with let instead of const, it wouldn't update the local variable immediately.
- Instead, React **creates and maintains an internal structure** to hold the state values.
- You can think of this as an **array** (like the statuses array described).
- Each time you call useState to declare a state variable (e.g., count, name), React **stores its value** in this internal structure**2...**. The first useState call's value goes into the first position, the second call's value into the second, and so on.
- When you call a set function (e.g., setCount), React **updates the corresponding value** in this internal state structure.
- When the component function is called again (re-rendered), useState does **not** use the initial value provided in the hook call (e.g., 0 for useState(0)) if an existing value is present in the internal structure.
- Instead, useState **retrieves the latest value** from this internal structure and provides it to the component.

**3. State Updates Within a Single Function Execution (Why Direct Updates Seem Delayed)**

- Calling a set function (like setCount) **does not immediately trigger a re-render** of the page or the component.
- The **entire function** (e.g., the onClick handler or the component function) must **finish executing** first.
- Only **after** the current function has completed its execution will React potentially trigger a re-render.
- During the execution of the function where the set calls occur, the **local state variable** (e.g., count) holds the **same value** it had at the **beginning** of that function's execution**4...**. It does not update immediately within the function's scope.
- This means if you call setCount(count + 1) multiple times within the same function execution, and the initial count was 0, each call will calculate 0 + 1 and try to set the state to 1**5**.

**4. The Problem with Multiple Updates Depending on Previous State**

- When state updates **depend on the previous value**, and you call the set function multiple times directly using the local variable (e.g., setCount(count + 1) followed by setCount(count + 1)).
- Each call uses the **same initial value** of the local variable from the start of the function's execution.
- For example, if count is 0, two calls of setCount(count + 1) will both calculate 0 + 1 = 1.
- React registers two updates, both aiming to set the state to 1. When the component re-renders, the final value will be 1, not 2.
- This is because the local count variable inside the currently running function doesn't update between the setCount calls**4...**.

**5. The Correct Approach: Using Callback Functions for Dependent Updates**

- React provides a mechanism to correctly handle state updates that **depend on the previous value5**.
- Instead of passing the new value directly, you pass a **callback function** to the set function (e.g., setCount(prev => prev + 1))**.**
- This callback function receives the **previous state** as its argument.
- You then **return the new value** from this callback function based on the previousState argument.

**6. Batched Updates (How Callbacks are Processed)**

- When you pass a callback function to the set function, React **registers** these updates.
- Before re-rendering, React will **execute these registered callback functions**.
- React **calls the callback function itself**, passing the **actual, up-to-date previous state** value at the time of the call.
- The value **returned** by the callback becomes the new state for that specific update.
- If multiple callback updates are registered (e.g., calling setCount(prev => prev + 1) three times), React will process them sequentially**5...**. The first callback gets the initial state, returns the new value; the second callback gets *that* new value, returns the next value, and so on.
- This process is described as React **batching state updates**, meaning it gathers multiple updates and processes them together before a single re-render**6**.

**7. Synchronous vs. Asynchronous Nature of State Updates**

- State updates in React are **not truly asynchronous** like a setTimeout.
- The update to React's **internal state storage** (the array discussed earlier) is **synchronous**.
- However, the **reflection** of this updated state value on the **UI** is delayed until the component **re-renders**.
- Since the re-render happens only *after* the current function execution is complete, it can *feel* like the state update is asynchronous because the local variable value doesn't change immediately and the UI doesn't update instantly.
- This delay in UI reflection, while the internal state is updated synchronously, is the reason for the perceived asynchronous behavior**3**.

**Summary**

useState is a React hook that creates state variables, triggering component re-renders when updated. React manages state internally, conceptually in an array, updating this internal storage when a set function is called. Crucially, calling a set function does not immediately update the local variable within the currently executing function or trigger a re-render; the render happens only after the function finishes. This leads to issues when multiple updates within the same function depend on the previous state, as they all see the same initial value. The correct way to handle such dependent updates is by passing a callback function to the set function. React batches these callback updates, processing them sequentially before rendering, with each callback receiving the actual previous state value. Although the internal state update is synchronous, the delayed re-rendering makes the visible effect of state changes appear asynchronous.

**Action Steps to Follow**

- When setting state where the new value **depends on the previous state**, always use the **callback function form** of the set function (e.g., setCount(prev => prev + 1))**.**
- Understand that the local state variable inside a function **does not update immediately** after calling its set function; it retains its value from the start of the render cycle or event handler execution until that execution is complete.



